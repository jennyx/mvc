{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block main %}
    <h1>Report</h1>
    <ul>
        <li><a href="#kmom01">kmom01</a></li>
        <li><a href="#kmom02">kmom02</a></li>
        <li><a href="#kmom03">kmom03</a></li>
        <li><a href="#kmom04">kmom04</a></li>
        <li><a href="#kmom05">kmom05</a></li>
        <li><a href="#kmom06">kmom06</a></li>
        <li><a href="#kmom07">kmom07</a></li>
    </ul>

    <section>
        <h2 id="kmom01">Kmom01</h2>
        <p><b>Berätta kort om dina förkunskaper och tidigare erfarenheter kring objektorientering.</b><br>
            Jag har fått erfarenheter kring objektorientering från oopython kursen samt objektorienterad 
            Java som jag läste för många år sen. Jag är bekant med att skapa klasser, moduler och 
            strukturera och dela upp kod i flera olika filer. Känner till arv och jobbat med det förr. Jag 
            har minne av interface och tror därför jag jobbat med det förr. 
        </p>
        <p><b>Berätta kort om PHPs modell för klasser och objekt. Vilka är de grunder man behöver veta/förstå 
            för att kunna komma igång och skapa sina första klasser?</b><br>
            En klass är som en mall för ett objekt. Den omsluter properties/variabler och metoder som kan vara 
            public, protected eller private. Klasser definieras med “class” och namnges med en stor bokstav i 
            början. Properties håller värden och metoder håller klassens funktioner. Man instansierar ett objekt 
            av en klass genom att använda sig av new och klassens namn, tex $object = new Class();
        </p>
        <p><b>Reflektera kort över den kodbas, koden, strukturen som användes till uppgiften me/report, hur 
            uppfattar du den?</b><br>
            Kodbasen innehåller väldigt mycket och många filer. Många av filerna vet jag inte vad de gör eller 
            innehåller. Det är mycket att hålla reda på, men när koden är uppdelad och strukturerad på det viset 
            ser det snyggare ut. Det är ordning och reda och lättare veta var man ska ändra i koden för ett 
            specifikt syfte, så som twig. 
        </p>
        <p><b>Med tanke på artikeln “PHP The Right Way”, vilka delar in den finner du extra intressanta och 
            värdefulla? Är det några särskilda områden som du känner att du vill veta mer om? Lyft fram några 
            delar av artikeln som du känner mer värdefulla.</b><br>
            Jag kollade bara väldigt snabbt igenom de första rubrikerna i artikeln. Jag tror att den kan vara 
            till god hjälp. Än så länge är det inget speciellt område som fångat mitt intresse så jag inte säga 
            vad jag vill veta mer om. Highlights och coding practices var för mig värdefulla för Getting started 
            med set up är inte lika intressant för mig. 
        </p>
        <p><b>Vilken är din TIL för detta kmom?</b><br>
            TIL för kmom01 är PHP namespaces som var helt nytt för mig.
        </p>
    </section>

    <section>
        <h2 id="kmom02">Kmom02</h2>
        <p><b>Förklara kort de objektorienterade konstruktionerna arv, komposition, interface och trait och 
            hur de används i PHP.</b><br>
            Arv - ärver metoder, properties och konstanter från föräldraklassen. Man kan ändra synligheten till 
            public men inte till private i den ärvda klassen.
            Komposition - en “hård koppling” mellan två objekt, utan det ena objektet kan det andra inte finnas, tex “Ett hus 
            har rum”.
            Interface -  visar vilka metoder en viss klass ska implementera, som en grund implementation. Om en klass implementerar 
            interface, lovar den att metoder uppfylls. 
            Trait - fristående och återanvändbar koddel som klasser kan använda. Återanvänds när flera arv (multipelt arv) inte 
            kan användas, som tex i PHP.
            Dessa OO konstruktioner används för en bättre och snyggare kodstruktur, för en lättare underhållning och gör den mer 
            testbar. Använd hellre composition än arv, och hellre trait och interface.
        </p>

        <p><b>Berätta om din implementation från uppgiften. Hur löste du uppgiften, är du nöjd/missnöjd, vilken 
            förbättringspotential ser du i din koden och dina klasser?</b><br>
            Jag är relativt nöjd med hur jag delade upp och implementerade koden baserad på tiden jag hade. Min kod utgick jag 
            från övningen vi hade. Jag tror jag hade nog kunnat ha ytterligare en klass CardHand för draw metoden och för att 
            hålla alla dragna kort istället för att spara dem i controllern, kanske gör förändringen/förbättringen i nästa kursmoment. 
            Jag hade kunnat konstruera så att korten hämtas genom value och suit. Jag har just nu gjort att korten bara behöver 
            value för att hämtas.
        </p>

        <p><b>Vilka är dina reflektioner så här långt med att jobb i Symfony med applikationskod enligt MVC?</b><br>
            För tillfället tycker Symfony känns helt okej, har inte så mycket att kommentera på den.
        </p>

        <p><b>Vilken är din TIL för detta kmom?</b><br>
            Min TIL är trait och interface.
        </p>
    </section>

    <section>
        <h2 id="kmom03">Kmom03</h2>
        <p><b> </b><br>
        </p>
    </section>
    <section>
        <h2 id="kmom04">Kmom04</h2>
        <p><b> </b><br>
        </p>
    </section>
    <section>
        <h2 id="kmom05">Kmom05</h2>
        <p><b> </b><br>
        </p>
    </section>
    <section>
        <h2 id="kmom06">Kmom06</h2>
        <p><b> </b><br>
        </p>
    </section>
    <section>
        <h2 id="kmom07">Kmom07</h2>
    </section>
{% endblock %}
